package com.lixuefeng.framework{		import com.lixuefeng.games.tower.Main;	import com.lixuefeng.games.tower.Tower;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.geom.Point;	import flash.text.TextFormat;	import flash.utils.getTimer;	import flash.utils.Timer;	import flash.events.TimerEvent;	import com.lixuefeng.games.tower.Global;	import gs.*; 	import gs.easing.*;	import flash.media.*;	import flash.media.SoundMixer;		import unit4399.events.SaveEvent;	//import mochi.as3.*;		public class GameFrameWork extends Sprite {				public static const EVENT_WAIT_COMPLETE:String = "wait complete";				//added in chapter 11				public static const KEY_MUTE:int = 77;  // added chapter 11		public static const KEY_PAUSE:int = 80; //added chapter 11 		public var paused:Boolean = false;		public var pausedScreen:BasicScreen; 				public var systemFunction:Function;		public var currentSystemState:int;		public var nextSystemState:int;		public var lastSystemState:int;		public var appBackBitmapData:BitmapData; 		public var appBackBitmap:Bitmap; ;				public var frameRate:int; 		public var timerPeriod:Number; 		public var gameTimer:Timer;				public var logoScreen:BasicScreen;		public var titleScreen:BasicScreen; 		public var gameOverScreen:BasicScreen; 		public var instructionsScreen:BasicScreen; 				//public var levelInScreen:BasicScreen; 		//public var scoreBoard:ScoreBoard;		public var statusScreen:StatusScreen;				/*		public var scoreBoardTextFormat:TextFormat;		public var screenTextFormat:TextFormat;		public var screenButtonFormat:TextFormat;				public var levelInText:String;		*/		public var soundManager:SoundManager;		//chapter 11 added		public var frameCounter:FrameCounter = new FrameCounter();		public var lastTime:Number;		public var timeDifference:Number;				/*		//chapter 12 added\		//Mochi		public var mochiGameId:String;		public var mochiBoardId:String;		public var lastScore:Number;				*/		//Game is our custom class to hold all logic for the game. 		public var game:Game;				private var continueGame:Boolean;		private var firstStartGame:Boolean = false;								//waitTime is used in conjunction with the STATE_SYSTEM_WAIT state		// it suspends the game and allows animation or other processing to finish		public var waitTime:int;		public var waitCount:int = 0;				public var closeType:String;						public static var serviceHold:* = null; 				public var logInfo:Object;						private var laberArray1:Array = [0, 1, 2, 3, 4];		private var laberArray2:Array = [5, 6, 7, 8, 9, 10, 11];		private var laberArray:Array = laberArray1;				private var currLaber:int = 0;		private var tempLaber:int;		public static const LABER_START:int = 0;		public static const LABER_CON:int = 1;		public static const LABER_SET:int = 2;		public static const LABER_HELP:int = 3;		public static const LABER_EXIT:int = 4;				//added chapter 11				/*		public var frameRateProfiler:FrameRateProfiler;				//**added chapter 12 for preloader		public var preloaderStarted:Boolean=false;		public var preloadString:String=new String();		public var preloadScreen:BasicScreen;				*/		// Our construction only calls init(). This way, we can re-init the entire system if necessary		public function GameFrameWork() {						soundManager = new SoundManager(); // moved		}				//function added in chapter 11		/*		public function addedToStage(e:Event = null):void {			stage.addEventListener(KeyboardEvent.KEY_DOWN,keyDownListener);			this.focusRect=false; // added chapter 11 			stage.focus = stage; // added chapter 11									trace("gamFrameWork added to stage");		}		*/				// init() is used to set up all of the things that we should only need to do one time		public function initData():void {					}				public function initGame():void {			trace("inner init");					}				/*		public function frameRateProfileComplete(e:Event):void {					}				//*** function added chapter 12		private function systemPreload():void {			if (!preloaderStarted) {				trace("preload started");				preloadScreen.setDisplayText("Loading: 0%"); //Changed chapter 12				addChild(preloadScreen)				//this.loaderInfo.addEventListener(ProgressEvent.PROGRESS, preloadProgress);				//this.loaderInfo.addEventListener(Event.COMPLETE, preloadComplete);				preloaderStarted=true;			}else{								var percentLoaded:int=(this.loaderInfo.bytesLoaded/this.loaderInfo.bytesTotal)*100;				trace(percentLoaded);				preloadString="Loading: "+percentLoaded+"%";				preloadScreen.setDisplayText(preloadString);				if (percentLoaded >99) {					trace(">99");					this.play();				}								if (currentFrame==3) {					trace("frame == 3")					addSounds();										removeChild(preloadScreen);					nextSystemState = FrameWorkStates.STATE_SYSTEM_TITLE;					switchSystemState(nextSystemState);				}							}					}		*/		/*		public function addSounds():void {			//stub only needed in IDE preloading		}				public function setApplicationBackGround(width:Number, height:Number, isTransparent:Boolean = false, color:uint = 0x000000):void {			appBackBitmapData = new BitmapData(width, height, isTransparent, color);			appBackBitmap = new Bitmap(appBackBitmapData);			addChild(appBackBitmap);		}				*/		public function startTimer(timeBasedAnimation:Boolean=false):void {			stage.frameRate = frameRate;						if (timeBasedAnimation) {				lastTime = getTimer();				addEventListener(Event.ENTER_FRAME, runGameEnterFrame);			}else{				timerPeriod = 1000 / frameRate;				gameTimer=new Timer(timerPeriod); //*** changed removed in new chapter 2				gameTimer.addEventListener(TimerEvent.TIMER, runGame);				gameTimer.start();			}													}						public function runGame(e:TimerEvent):void {							systemFunction(); 				frameCounter.countFrames();				//e.updateAfterEvent();					}				public function runGameEnterFrame(e:Event):void {				timeDifference = getTimer() - lastTime;				lastTime = getTimer();				systemFunction(); 				frameCounter.countFrames();					}		//switchSystem state is called only when the state is to be changed (not every frame like in some switch/case		//based simple state machines				public function switchSystemState(stateval:int):void {			lastSystemState = currentSystemState;			currentSystemState = stateval;						trace("currentSystemState=" + currentSystemState)			switch(stateval) {		       /*				case FrameWorkStates.STATE_SYSTEM_WAIT: 					systemFunction = systemWait;					break;				*/				case FrameWorkStates.STATE_SYSTEM_LOGO:					systemFunction = systemLogo;					break;									case FrameWorkStates.STATE_SYSTEM_WAIT_FOR_CLOSE:					systemFunction = systemWaitForClose;					break;								case FrameWorkStates.STATE_SYSTEM_TITLE:					systemFunction = systemTitle;					break;				/*			    case FrameWorkStates.STATE_SYSTEM_INSTRUCTIONS:					systemFunction = systemInstructions;					break;				*/				case FrameWorkStates.STATE_SYSTEM_NEW_GAME:					systemFunction = systemNewGame;					break;									case FrameWorkStates.STATE_SYSTEM_GAME_PLAY:					systemFunction = systemGamePlay;					break								case FrameWorkStates.STATE_SYSTEM_GAME_OVER:					systemFunction = systemGameOver;					break;					/*					//*** added chapter 12				case FrameWorkStates.STATE_SYSTEM_MOCHI_AD: 					systemFunction = systemMochiAd;					break;									case FrameWorkStates.STATE_SYSTEM_MOCHI_HIGHSCORES: 					systemFunction = systemMochiHighscores;					break;				case FrameWorkStates.STATE_SYSTEM_PRELOAD: 					systemFunction = systemPreload;					break;				//*** end added chapter 12				*/			}						}								/*				public function systemMochiAd():void {						//format resolotion as string example: 600x400			var resolution:String = stage.width + "x" + stage.height;								MochiAd.showPreGameAd({clip:this, id:mochiGameId, res:resolution, ad_finished:mochiAdComplete, ad_failed:mochiAdComplete, ad_skipped:mochiAdComplete});			switchSystemState(FrameWorkStates.STATE_SYSTEM_WAIT_FOR_CLOSE);			nextSystemState = FrameWorkStates.STATE_SYSTEM_TITLE;		}				//*** new Function for Mochi ads chapter 12		public  function mochiAdComplete():void {			switchSystemState(nextSystemState);		}				//*** added chapter 12 for mochi high scores		public  function systemMochiHighscores():void {			var resolution:String = stage.width + "x" + stage.height;			var o:Object = { n: [15, 15, 14, 2, 13, 14, 0, 10, 14, 2, 2, 1, 10, 7, 15, 4], f: function (i:Number,s:String):String { if (s.length == 16) return s; return this.f(i+1,s + this.n[i].toString(16));}};			//var boardID:String = o.f(0,"");			MochiScores.showLeaderboard({boardID: mochiBoardId, score: lastScore, onClose:mochiHighscoresComplete, res:resolution });						switchSystemState(FrameWorkStates.STATE_SYSTEM_WAIT_FOR_CLOSE);			nextSystemState = FrameWorkStates.STATE_SYSTEM_TITLE;		}				//*** new Function for Mochi ads chapter 12		public  function mochiHighscoresComplete():void {			switchSystemState(nextSystemState);			}		*/		public function systemLogo():void {			initData();			initGame();			//addChild(logoScreen);						//logoScreen.imageBitmaps[0].alpha = 0;			//logoScreen.imageBitmaps[1].alpha = 0;			//TweenLite.to(logoScreen.imageBitmaps[1], 2, { alpha:1, ease:Quint.easeOut ,onComplete:fadeInComplete1} );			//switchSystemState(FrameWorkStates.STATE_SYSTEM_WAIT_FOR_CLOSE);			nextSystemState = FrameWorkStates.STATE_SYSTEM_TITLE;			switchSystemState(nextSystemState);		}				private function fadeInComplete1():void {			TweenLite.to(logoScreen.imageBitmaps[1], 2, { alpha:0, ease:Quint.easeOut, delay:2, onComplete:fadeOutComplete1} );		}		private function fadeOutComplete1():void {			TweenLite.to(logoScreen.imageBitmaps[0], 3, { alpha:1, ease:Quint.easeOut ,onComplete:fadeInComplete0} );		}				private function fadeInComplete0():void {			TweenLite.to(logoScreen.imageBitmaps[0], 3, { alpha:0, ease:Quint.easeOut, delay:2, onComplete:fadeOutComplete0} );		}				private function fadeOutComplete0():void {			removeChild(logoScreen);			switchSystemState(nextSystemState);		}				/*		private function fadeInComplete0():void {			TweenLite.to(logoScreen.imageBitmaps[0], 2, { alpha:0, ease:Quint.easeOut, delay:2, onComplete:fadeOutComplete0} );		}		private function fadeOutComplete0():void {			removeChild(logoScreen);			switchSystemState(nextSystemState);		}		*/				public function systemTitle():void {			stage.focus = Global.stage;			//玩家登陆事件			Global.stage.addEventListener(SaveEvent.LOG, saveProcess, false, 0, true);			Global.stage.addEventListener(SaveEvent.LOG, saveProcess, true, 0, true);			//存档事件			Global.stage.addEventListener(SaveEvent.SAVE_GET, saveProcess, false, 0, true);			Global.stage.addEventListener(SaveEvent.SAVE_GET, saveProcess, true, 0, true);						//读档事件			Global.stage.addEventListener(SaveEvent.SAVE_SET, saveProcess, false, 0, true);			Global.stage.addEventListener(SaveEvent.SAVE_SET, saveProcess, true, 0, true);						addChild(titleScreen);			titleScreen.alpha = 0;			TweenLite.to(titleScreen, 3, { alpha:1, ease:Quint.easeOut ,onComplete:systemTitleOnComplete} );			Global.stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownListener, false, 0, true);			titleScreen.addEventListener(SimpleButtonEvent.BUTTON_ID, buttonClickListener, false, 0, true);			switchSystemState(FrameWorkStates.STATE_SYSTEM_WAIT_FOR_CLOSE);			nextSystemState = FrameWorkStates.STATE_SYSTEM_NEW_GAME;		}				//标题画面出现后执行		private function systemTitleOnComplete():void {			//if(game.backToTitle == true) {				//removeChild(game);				//removeChild(statusScreen);				//game.backToTitle = false;			//}		}				private function keyDownListener(e:KeyboardEvent):void {			//下			if (e.keyCode == 40) {				tempLaber = currLaber;				tempLaber++;				if (tempLaber > laberArray[laberArray.length - 1]) {					tempLaber = laberArray[0];				}				currLaber = tempLaber;				if (laberArray == laberArray1) {					titleScreen.imageBitmapsSeenId = currLaber;					titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].x = titleScreen.simpleButtons[currLaber].x - 40;					titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].y = titleScreen.simpleButtons[currLaber].y + 14;				} else if (laberArray == laberArray2) {					titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].x = titleScreen.simpleButtons[currLaber].x - 75;					titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].y = titleScreen.simpleButtons[currLaber].y + 6 + (currLaber - 5) * 2;				}			}			//上			else if (e.keyCode == 38) {								tempLaber = currLaber;				tempLaber--;				if (tempLaber < laberArray[0]) {					tempLaber = laberArray[laberArray.length - 1];				}				currLaber = tempLaber;							if (laberArray == laberArray1) {					titleScreen.imageBitmapsSeenId = currLaber;					titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].x = titleScreen.simpleButtons[currLaber].x - 40;					titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].y = titleScreen.simpleButtons[currLaber].y + 14;				} else if (laberArray == laberArray2) {					titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].x = titleScreen.simpleButtons[currLaber].x - 75;					titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].y = titleScreen.simpleButtons[currLaber].y + 6 + (currLaber - 5) * 2;				}			} 			else if (e.keyCode == 39) {				if(currLaber == LABER_CON) {					titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].x = titleScreen.simpleButtons[5].x - 75;					titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].y = titleScreen.simpleButtons[5].y + 6;					laberArray = laberArray2;					currLaber = 5;				}			} 			else if (e.keyCode == 37) {				if (laberArray == laberArray2) {					titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].x = titleScreen.simpleButtons[1].x - 40;					titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].y = titleScreen.simpleButtons[1].y + 14;					laberArray = laberArray1;					currLaber = 1;				}			}						else if (e.keyCode == 13 || e.keyCode == 32) {				if(laberArray == laberArray1) {					switch(currLaber) {										case LABER_START:							removeChild(titleScreen);							continueGame = false;							Global.stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownListener);							titleScreen.removeEventListener(SimpleButtonEvent.BUTTON_ID, buttonClickListener);							game.reload = false;							switchSystemState(FrameWorkStates.STATE_SYSTEM_NEW_GAME);							firstStartGame = true;							break;						case LABER_CON:							break;													case LABER_SET:							/*							showMoreGame();							closeType = "titleScreen";								titleScreen.mouseEnabled = false;							titleScreen.mouseChildren = false;							Global.stage.addEventListener("MVC_CLOSE_PANEL", closePanelHandler);							*/							break;						case LABER_HELP:							removeChild(gameOverScreen);							gameOverScreen.removeEventListener(SimpleButtonEvent.BUTTON_ID, buttonClickListener);							switchSystemState(nextSystemState);							break;												}				} 				else if(laberArray == laberArray2){											/*					logInfo = GameFrameWork.serviceHold.isLog					if (logInfo == null) {						showLogWin();					} else {						getData();											}					titleScreen.mouseEnabled = false;					titleScreen.mouseChildren = false;					closeType = "titleScreen";										Global.stage.addEventListener("MVC_CLOSE_PANEL", closePanelHandler);					*/					/*					removeChild(titleScreen);					continueGame = true;					Global.stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownListener);					titleScreen.removeEventListener(SimpleButtonEvent.BUTTON_ID, buttonClickListener);					game.reload = true;					switchSystemState(FrameWorkStates.STATE_SYSTEM_NEW_GAME);					firstStartGame = true;					*/																(game as Tower).loadId = currLaber - 5;					(game as Tower).loadTitle = "Tower" + String(currLaber - 5);										removeChild(titleScreen);					Global.stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownListener);					titleScreen.removeEventListener(SimpleButtonEvent.BUTTON_ID, buttonClickListener);					game.reload = true;					switchSystemState(FrameWorkStates.STATE_SYSTEM_NEW_GAME);										trace("next system state=" + nextSystemState);					}			}		}						/*		public function systemInstructions():void {		//	trace("system instructions");			addChild(instructionsScreen);			instructionsScreen.addEventListener(CustomEventButtonId.BUTTON_ID, okButtonClickListener, false, 0, true);			switchSystemState(FrameWorkStates.STATE_SYSTEM_WAIT_FOR_CLOSE);			nextSystemState = FrameWorkStates.STATE_SYSTEM_NEW_GAME;		}		*/				public function systemNewGame():void {			Global.stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownListener);			addChild(statusScreen);			game.addEventListener(StatusScreenUpdateEvent.UPDATE, statusScreenUpdateListener, false, 0, true);			game.alpha = 0;			TweenLite.to(game, 2, { alpha:1, ease:Quint.easeOut,delay:1.5} );			addChild(game);			stage.focus = game;			game.newGame();					Global.stage.addEventListener(CustomEventSound.PLAY_SOUND, soundEventListener, true, 0, true);			Global.stage.addEventListener(CustomEventSound.PLAY_SOUND, soundEventListener,false, 0, true);						Global.stage.addEventListener(CustomEventSound.STOP_SOUND, soundEventListener,true, 0, true);			Global.stage.addEventListener(CustomEventSound.STOP_SOUND, soundEventListener,false, 0, true);						Global.stage.addEventListener(Game.GAME_OVER, gameOverListener, true, 0, true);			game.addEventListener(Game.BACK_TO_TITLE, backToTitleListener, false, 0 , true);						game.addEventListener(Game.GAME_OVER, gameOverListener, false, 0, true);									switchSystemState(FrameWorkStates.STATE_SYSTEM_GAME_PLAY);		}								public function systemGameOver():void {						game.overGame();			gameOverScreen.alpha = 0;			if (game.gameAllOver == true) {				gameOverScreen.imageBitmaps[AddId.SCREEN_GAMEOVER_IMAGE_GAMEOVER].visible = false;			} else {								gameOverScreen.imageBitmaps[AddId.SCREEN_GAMEOVER_IMAGE_GAMEALLOVER].visible = false;			}			TweenLite.to(gameOverScreen, 2, { alpha:1, ease:Quint.easeOut,delay:1.5, onComplete:overScreenComplete} );			addChild(gameOverScreen);			gameOverScreen.addEventListener(SimpleButtonEvent.BUTTON_ID, buttonClickListener, false, 0, true);			nextSystemState = FrameWorkStates.STATE_SYSTEM_TITLE;			switchSystemState(FrameWorkStates.STATE_SYSTEM_WAIT_FOR_CLOSE);		}				private function overScreenComplete():void {			removeChild(game);			removeChild(statusScreen);		}				public function systemGamePlay():void {						game.runGame();								}								public function systemWaitForClose():void {			switch(lastSystemState) {								case FrameWorkStates.STATE_SYSTEM_TITLE:					var i:int;					var j:int;					for (i = 0; i < titleScreen.simpleButtons.length; i ++) {						if (titleScreen.simpleButtons[i].state == SimpleButton.OVER) {							if(i < 5) {								titleScreen.imageBitmapsSeenId = i;								titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].x = titleScreen.simpleButtons[i].x - 40;								titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].y = titleScreen.simpleButtons[i].y + 14;							} else {								titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].x = titleScreen.simpleButtons[i].x - 75;								titleScreen.imageBitmaps[AddId.SCREEN_TITLE_IMAGE_POINT].y = titleScreen.simpleButtons[i].y + 6 + (i - 5) * 2;							}						}					}					for (i = 0; i < titleScreen.imageBitmaps.length - 1; i ++ ) {						if (titleScreen.imageBitmapsSeenId == i) {							if(titleScreen.imageBitmapsSeenId == 1) {								for (j = 5; j < titleScreen.simpleButtons.length; j ++ ) {									titleScreen.simpleButtons[j].mouseEnabled = true;									TweenLite.to(titleScreen.simpleButtons[j], 5, { alpha:1, ease:Quint.easeOut } );												}							} else {								TweenLite.to(titleScreen.imageBitmaps[i], 5, { alpha:1, ease:Quint.easeOut } );							}						} else {							if(titleScreen.imageBitmapsSeenId != 1) {								for (j = 5; j < titleScreen.simpleButtons.length; j ++ ) {									titleScreen.simpleButtons[j].mouseEnabled = false;									TweenLite.to(titleScreen.simpleButtons[j], 5, { alpha:0, ease:Quint.easeOut } );								}							}							TweenLite.to(titleScreen.imageBitmaps[i], 5, { alpha:0, ease:Quint.easeOut } );						}					}										break;									case FrameWorkStates.STATE_SYSTEM_GAME_OVER:					break;				case FrameWorkStates.STATE_SYSTEM_LOGO:					break;			}											}				/*		public function systemWait():void {			waitCount++;				if (waitCount > waitTime) {					waitCount = 0;					dispatchEvent(new Event(EVENT_WAIT_COMPLETE));				}		}	*/		public function buttonClickListener(e:SimpleButtonEvent):void {			if(e.id < 5) {				switch(e.id) {										case AddId.SCREEN_TITLE_BUTTON_START:						removeChild(titleScreen);						Global.stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownListener);						titleScreen.removeEventListener(SimpleButtonEvent.BUTTON_ID, buttonClickListener);							game.reload = false;						switchSystemState(FrameWorkStates.STATE_SYSTEM_NEW_GAME);											break;					case AddId.SCREEN_TITLE_BUTTON_CON:												break;											case AddId.SCREEN_TITLE_BUTTON_SET:												showMoreGame();						closeType = "titleScreen";							titleScreen.mouseEnabled = false;						titleScreen.mouseChildren = false;						Global.stage.addEventListener("MVC_CLOSE_PANEL", closePanelHandler);												break;					case AddId.SCREEN_GAMEOVER_BUTTON_RESTART:						removeChild(gameOverScreen);						gameOverScreen.removeEventListener(SimpleButtonEvent.BUTTON_ID, buttonClickListener);						switchSystemState(nextSystemState);						break;																}			} else {				/*				logInfo = GameFrameWork.serviceHold.isLog				if (logInfo == null) {					showLogWin();				} else {					(game as Tower).reloadScreen();															}				titleScreen.mouseEnabled = false;				titleScreen.mouseChildren = false;				closeType = "titleScreen";									Global.stage.addEventListener("MVC_CLOSE_PANEL", closePanelHandler);				*/								(game as Tower).loadId = e.id - 5;				(game as Tower).loadTitle = "Tower" + String(e.id - 5);								removeChild(titleScreen);				Global.stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownListener);				titleScreen.removeEventListener(SimpleButtonEvent.BUTTON_ID, buttonClickListener);				game.reload = true;				switchSystemState(FrameWorkStates.STATE_SYSTEM_NEW_GAME);																													}			trace("next system state=" + nextSystemState);				}				private function closePanelHandler (e:Event):void {			switch(closeType) {				case "titleScreen":					titleScreen.mouseEnabled = true;					titleScreen.mouseChildren = true;					break;			}						Global.stage.removeEventListener("MVC_CLOSE_PANEL", closePanelHandler);		}						public function statusScreenUpdateListener(e:StatusScreenUpdateEvent):void {			statusScreen.update(e.element, e.text, e.image);		}				/*		public function levelScreenUpdateListener(e:CustomEventLevelScreenUpdate):void {			levelInScreen.setDisplayText(levelInText + e.text);		}		*/		//gameOverListener listens for Game.GAMEOVER simple custom events calls and changes state accordingly		public function backToTitleListener(e:Event):void {				game.backToTitle = true;			switchSystemState(FrameWorkStates.STATE_SYSTEM_TITLE);		}						public function gameOverListener(e:Event):void {			switchSystemState(FrameWorkStates.STATE_SYSTEM_GAME_OVER);						game.removeEventListener(StatusScreenUpdateEvent.UPDATE, statusScreenUpdateListener);						Global.stage.removeEventListener(CustomEventSound.PLAY_SOUND, soundEventListener);			Global.stage.removeEventListener(CustomEventSound.PLAY_SOUND, soundEventListener, true);						Global.stage.removeEventListener(CustomEventSound.STOP_SOUND, soundEventListener);			Global.stage.removeEventListener(CustomEventSound.STOP_SOUND, soundEventListener, true);			game.removeEventListener(Game.BACK_TO_TITLE, backToTitleListener);			Global.stage.removeEventListener(Game.GAME_OVER, gameOverListener);						game.removeEventListener(Game.GAME_OVER, gameOverListener);		}		/*		//newLevelListener listens for Game.NEWLEVEL simple custom events calls and changes state accordingly		public function newLevelListener(e:Event):void {			switchSystemState(FrameWorkStates.STATE_SYSTEM_NEW_LEVEL);		}				public function waitCompleteListener(e:Event):void {			switch(lastSystemState) {								case FrameWorkStates.STATE_SYSTEM_LEVEL_IN:					removeChild(levelInScreen);					break			}			removeEventListener(EVENT_WAIT_COMPLETE, waitCompleteListener);			switchSystemState(nextSystemState);		}		*/		public function soundEventListener(e:CustomEventSound):void {			if(e.fade == false) {				if (e.type == CustomEventSound.PLAY_SOUND) {					soundManager.playSound(e.name, e.isSoundTrack, e.loops, e.offset, e.volume );				}else {					soundManager.stopSound(e.name, e.isSoundTrack);				}			} else {				if (e.type == CustomEventSound.PLAY_SOUND) {					soundManager.playSound(e.name, e.isSoundTrack, e.loops, e.offset, e.volume );					TweenLite.to(soundManager.soundChannels[e.name], e.lastTime, {volume:e.lastVolumn, onUpdate:updateChannel , onUpdateParams:[e.name]});				} else {					trace("stopSound");					TweenLite.to(soundManager.soundChannels[e.name], e.lastTime, {volume:e.lastVolumn, onUpdate:updateChannel , onUpdateParams:[e.name], onComplete:completeChannel, onCompleteParams:[e.name]});				}			}		}				private function updateChannel(soundId:String):void {			var soundTransform: SoundTransform = new SoundTransform(soundManager.soundChannels[soundId].soundTransform.volume, 0 );			soundManager.soundChannels[soundId].soundTransform = soundTransform;			}				private function completeChannel(soundId:String):void {			soundManager.stopSound(soundId);		}						public function setHold(hold:*):void		{ 			serviceHold = hold; 		}								/**		 * 开启登陆面板		 */		public function showLogWin():void		{			if (serviceHold)			{				serviceHold.showLogPanel();			}		}				/**		 * 显示更多游戏		 */		public function showMoreGame():void		{			if (serviceHold)			{     				serviceHold.showGameList(); 			}		}				/**		 * 提交积分		 * @param	score 分数		 */		public function showRefer(score:int):void		{			if (serviceHold)			{				serviceHold.showRefer(score);			}		}				/**		 * 存档		 * @param	title  存档标题		 * @param	data   存档内容		 * @param	ui     是否需要UI		 * @param	index  存档位置（0-7）		 */		public function saveData(title:String, data:Object, ui:Boolean = true, index:int = 0):void		{			if (serviceHold)			{				serviceHold.saveData(title, data, ui, index);			}		}				/**		 * 读档		 * @param	ui     是否要开启UI		 * @param	index  读档的位置（0-7）		 */		public function getData(ui:Boolean = true, index:int = 0):void		{			if (serviceHold)			{				serviceHold.getData(ui, index);			}		}				/**		 * 打开存档，读档面板		 * @param	title  存档标题		 * @param	data   存档内容		 */		public function openSaveUI(title:String, data:Object):void		{			if (serviceHold)			{				serviceHold.openSaveUI(title, data);			}		}				/**		 * 处理存档事件		 * @param	e		 */		public function saveProcess(e:SaveEvent):void		{			switch(e.type)			{				case SaveEvent.LOG:					showLogInfo(e.ret);				break;				case SaveEvent.SAVE_GET:					showGetDataReturn(e.ret)				break;				case SaveEvent.SAVE_SET:					showSaveDataReturn(e.ret as Boolean)				break;			}		}				/**		 * 获取玩家信息		 * @param	obj {uid:"100000",name:"lqs"}		 * uid:玩家ID		 * name:玩家昵称		 */		public function showLogInfo(obj:Object):void		{			switch(closeType) {				case "titleScreen":					titleScreen.mouseEnabled = true;					titleScreen.mouseChildren = true;					break;			}			if (obj != null)			{				(game as Tower).logReturn(obj.uid, obj.name);			}		}		/**		 * 存档返回		 * @param	bol 		 * 			true 存档成功 false 存档失败		 */		public function showSaveDataReturn(bol:Boolean):void		{			(game as Tower).saveDataReturn(bol);			statusScreen.changeDisplayText(0, "存档成功");		}				/**		 * 读档 返回		 * {title:"标题",data:"内容",index:"0",datetime:"2011-02-21 17:50:40"}		 * title:存档标题		 * data:存档内容		 * index:存档的位置（0-7）		 * datetime:存档时间		 * @param	obj		 */		public function showGetDataReturn(obj:Object):void		{						removeChild(titleScreen);			titleScreen.removeEventListener(SimpleButtonEvent.BUTTON_ID, buttonClickListener);			game.reload = true;						(game as Tower).getDataReturn(obj.data);			switchSystemState(FrameWorkStates.STATE_SYSTEM_NEW_GAME);								}								/*		public  function keyDownListener(e:KeyboardEvent):void { 					trace("key down: " + e.keyCode);			switch(e.keyCode) {				case KEY_PAUSE:					//pause key pressed					pausedKeyPressedHandler();					break;				case KEY_MUTE:					muteKeyPressedHandler();					break;							}					}										public function pausedScreenClickListener(e:Event):void {			removeChild(pausedScreen);			pausedScreen.removeEventListener(CustomEventButtonId.BUTTON_ID, okButtonClickListener);			trace("clicked");			paused = false;			stage.focus = game;		}						public  function pausedKeyPressedHandler():void {			trace("handle pause");			addChild(pausedScreen);			pausedScreen.addEventListener(CustomEventButtonId.BUTTON_ID , pausedScreenClickListener, false, 0, true);			paused = true;		}				public  function muteKeyPressedHandler():void {			soundManager.muteSound();		}				*/			}	}